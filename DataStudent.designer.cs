#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace cs2313huangtao_test1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="student1_data")]
	public partial class DataStudentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSC(SC instance);
    partial void UpdateSC(SC instance);
    partial void DeleteSC(SC instance);
    #endregion
		
		public DataStudentDataContext() : 
				base("Data Source=T;Initial Catalog=student1_data;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public DataStudentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStudentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStudentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<SC> SC
		{
			get
			{
				return this.GetTable<SC>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Cno;
		
		private string _Cname;
		
		private System.Nullable<double> _Ccredit;
		
		private string _Cpno;
		
		private string _Description;
		
		private EntitySet<Course> _Course2;
		
		private EntitySet<SC> _SC;
		
		private EntityRef<Course> _Course1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCnoChanging(string value);
    partial void OnCnoChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnCcreditChanging(System.Nullable<double> value);
    partial void OnCcreditChanged();
    partial void OnCpnoChanging(string value);
    partial void OnCpnoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Course()
		{
			this._Course2 = new EntitySet<Course>(new Action<Course>(this.attach_Course2), new Action<Course>(this.detach_Course2));
			this._SC = new EntitySet<SC>(new Action<SC>(this.attach_SC), new Action<SC>(this.detach_SC));
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cno", DbType="Char(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cno
		{
			get
			{
				return this._Cno;
			}
			set
			{
				if ((this._Cno != value))
				{
					this.OnCnoChanging(value);
					this.SendPropertyChanging();
					this._Cno = value;
					this.SendPropertyChanged("Cno");
					this.OnCnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string Cname
		{
			get
			{
				return this._Cname;
			}
			set
			{
				if ((this._Cname != value))
				{
					this.OnCnameChanging(value);
					this.SendPropertyChanging();
					this._Cname = value;
					this.SendPropertyChanged("Cname");
					this.OnCnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ccredit", DbType="Float")]
		public System.Nullable<double> Ccredit
		{
			get
			{
				return this._Ccredit;
			}
			set
			{
				if ((this._Ccredit != value))
				{
					this.OnCcreditChanging(value);
					this.SendPropertyChanging();
					this._Ccredit = value;
					this.SendPropertyChanged("Ccredit");
					this.OnCcreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cpno", DbType="Char(4)")]
		public string Cpno
		{
			get
			{
				return this._Cpno;
			}
			set
			{
				if ((this._Cpno != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCpnoChanging(value);
					this.SendPropertyChanging();
					this._Cpno = value;
					this.SendPropertyChanged("Cpno");
					this.OnCpnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Course", Storage="_Course2", ThisKey="Cno", OtherKey="Cpno")]
		public EntitySet<Course> Course2
		{
			get
			{
				return this._Course2;
			}
			set
			{
				this._Course2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SC", Storage="_SC", ThisKey="Cno", OtherKey="Cno")]
		public EntitySet<SC> SC
		{
			get
			{
				return this._SC;
			}
			set
			{
				this._SC.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Course", Storage="_Course1", ThisKey="Cpno", OtherKey="Cno", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Course2.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Course2.Add(this);
						this._Cpno = value.Cno;
					}
					else
					{
						this._Cpno = default(string);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Course2(Course entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Course2(Course entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Sno;
		
		private string _Sname;
		
		private System.Nullable<short> _Sage;
		
		private string _Sgender;
		
		private string _College;
		
		private EntitySet<SC> _SC;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSnoChanging(string value);
    partial void OnSnoChanged();
    partial void OnSnameChanging(string value);
    partial void OnSnameChanged();
    partial void OnSageChanging(System.Nullable<short> value);
    partial void OnSageChanged();
    partial void OnSgenderChanging(string value);
    partial void OnSgenderChanged();
    partial void OnCollegeChanging(string value);
    partial void OnCollegeChanged();
    #endregion
		
		public Student()
		{
			this._SC = new EntitySet<SC>(new Action<SC>(this.attach_SC), new Action<SC>(this.detach_SC));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sno", DbType="Char(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Sno
		{
			get
			{
				return this._Sno;
			}
			set
			{
				if ((this._Sno != value))
				{
					this.OnSnoChanging(value);
					this.SendPropertyChanging();
					this._Sno = value;
					this.SendPropertyChanged("Sno");
					this.OnSnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sname", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string Sname
		{
			get
			{
				return this._Sname;
			}
			set
			{
				if ((this._Sname != value))
				{
					this.OnSnameChanging(value);
					this.SendPropertyChanging();
					this._Sname = value;
					this.SendPropertyChanged("Sname");
					this.OnSnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sage", DbType="SmallInt")]
		public System.Nullable<short> Sage
		{
			get
			{
				return this._Sage;
			}
			set
			{
				if ((this._Sage != value))
				{
					this.OnSageChanging(value);
					this.SendPropertyChanging();
					this._Sage = value;
					this.SendPropertyChanged("Sage");
					this.OnSageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sgender", DbType="Char(2)")]
		public string Sgender
		{
			get
			{
				return this._Sgender;
			}
			set
			{
				if ((this._Sgender != value))
				{
					this.OnSgenderChanging(value);
					this.SendPropertyChanging();
					this._Sgender = value;
					this.SendPropertyChanged("Sgender");
					this.OnSgenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_College", DbType="VarChar(50)")]
		public string College
		{
			get
			{
				return this._College;
			}
			set
			{
				if ((this._College != value))
				{
					this.OnCollegeChanging(value);
					this.SendPropertyChanging();
					this._College = value;
					this.SendPropertyChanged("College");
					this.OnCollegeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SC", Storage="_SC", ThisKey="Sno", OtherKey="Sno")]
		public EntitySet<SC> SC
		{
			get
			{
				return this._SC;
			}
			set
			{
				this._SC.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SC")]
	public partial class SC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Sno;
		
		private string _Cno;
		
		private System.Nullable<double> _Grade;
		
		private int _SCID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSnoChanging(string value);
    partial void OnSnoChanged();
    partial void OnCnoChanging(string value);
    partial void OnCnoChanged();
    partial void OnGradeChanging(System.Nullable<double> value);
    partial void OnGradeChanged();
    partial void OnSCIDChanging(int value);
    partial void OnSCIDChanged();
    #endregion
		
		public SC()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sno", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string Sno
		{
			get
			{
				return this._Sno;
			}
			set
			{
				if ((this._Sno != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSnoChanging(value);
					this.SendPropertyChanging();
					this._Sno = value;
					this.SendPropertyChanged("Sno");
					this.OnSnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cno", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string Cno
		{
			get
			{
				return this._Cno;
			}
			set
			{
				if ((this._Cno != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCnoChanging(value);
					this.SendPropertyChanging();
					this._Cno = value;
					this.SendPropertyChanged("Cno");
					this.OnCnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Float")]
		public System.Nullable<double> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SCID
		{
			get
			{
				return this._SCID;
			}
			set
			{
				if ((this._SCID != value))
				{
					this.OnSCIDChanging(value);
					this.SendPropertyChanging();
					this._SCID = value;
					this.SendPropertyChanged("SCID");
					this.OnSCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SC", Storage="_Course", ThisKey="Cno", OtherKey="Cno", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.SC.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.SC.Add(this);
						this._Cno = value.Cno;
					}
					else
					{
						this._Cno = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SC", Storage="_Student", ThisKey="Sno", OtherKey="Sno", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.SC.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.SC.Add(this);
						this._Sno = value.Sno;
					}
					else
					{
						this._Sno = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
